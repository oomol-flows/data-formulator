nodes:
  - task: self::derive-data
    title: Derive data
    node_id: derive-data#1
    inputs_from:
      - handle: instruction
        from_flow:
          []
        from_node:
          - node_id: llm#2
            output_handle: instruction
      - handle: x_axis_name
        value:
        from_flow:
          []
        from_node:
          - node_id: llm#2
            output_handle: x_axis_name
      - handle: y_axis_name
        value:
        from_flow:
          []
        from_node:
          - node_id: llm#2
            output_handle: y_axis_name
      - handle: code_repair_attempts
        value:
        from_flow:
          - input_handle: code_repair_attempts
      - handle: data
        from_node:
          - node_id: read_files#1
            output_handle: output
      - handle: llm_model
        value:
          model: oomol-chat
          temperature: 0
          top_p: 0.5
          max_tokens: 4096
        from_flow:
          - input_handle: llm_model
    description: |-
      instruction：需要达到的目的，比如“统计xxx 性价比高低，按照性价比排序”
      x_axis_name: 想要输出的横轴名称，可能会跟输出不一致，由ai 判断
      y_axis_name: 想要输出的纵轴名称，可能会跟输出不一致，由ai 判断

      code_for_derive: ai 自动生成的代码，用于提取数据
      content： 按照要求提取的数据
      code_repair_attempts: 生成错误代码后重新尝试生成的次数
    inputs_def:
      []
  - node_id: read_files#1
    task: self::read_files
    inputs_from:
      - handle: tables
        value:
          []
        from_flow:
          []
        from_node:
          - node_id: +python#1
            output_handle: tables
      - handle: enable_preview
        value: false
    description: |-
      传入需要处理的 表格 文件，需要 xlsx 或者 csv 格式。
      文件可以是多个，如果要添加文件请自行增加 input 项，然后选择文件
  - node_id: result_chart#1
    task: self::result_chart
    inputs_from:
      - handle: x_column
        from_node:
          - node_id: derive-data#1
            output_handle: refined_x_axis_name
      - handle: y_column
        from_node:
          - node_id: derive-data#1
            output_handle: refined_y_axis_name
      - handle: data
        from_node:
          - node_id: derive-data#1
            output_handle: content
      - handle: title
        value:
        from_node:
          - node_id: llm#2
            output_handle: title
      - handle: chart_type
        value: ""
        from_node:
          - node_id: llm#2
            output_handle: chart_type
  - node_id: llm-chat#1
    title: "LLM chat #1"
    inputs_from:
      - handle: messages
        value: null
      - handle: timeout
        value: 30
      - handle: retry_times
        value: 0
      - handle: model
        value:
          model: oomol-chat
          temperature: 0
          top_p: 0.5
          max_tokens: 4096
        from_flow:
          - input_handle: llm_model
      - handle: template
        value:
          - role: user
            content: "使用{{language}}输出{{input}}内容"
        schema_overrides:
          - schema:
              type: array
      - handle: retry_sleep
        value: 3.5
      - handle: skills
        value:
          []
      - handle: stream
        value: true
      - handle: input
        from_node:
          - node_id: derive-data#1
            output_handle: code_explain
      - handle: language
        from_node:
          - node_id: llm#2
            output_handle: language
    task: llm::llm-chat
    inputs_def:
      - handle: input
        json_schema:
          type: string
      - handle: language
        json_schema:
          type: string
  - node_id: llm#2
    title: "LLM #2"
    inputs_from:
      - handle: messages
        value: null
      - handle: timeout
        value: 30
      - handle: retry_times
        value: 0
      - handle: retry_sleep
        value: 3.5
      - handle: model
        value:
          model: oomol-chat
          temperature: 0
          top_p: 0.5
          max_tokens: 4096
        from_flow:
          - input_handle: llm_model
      - handle: template
        value:
          - role: user
            content: "你是一个数据分析的专家，深刻理解数据可视化，数据分析，数据处理。

              1. 你的任务是分析用户输入内容 {{instruction}}
              的意图，理解意图之后描述出更加详细专业的内容。

              2. 阅读{{instruction}}内容，判断作者使用的语言

              3. 根据意图生产一个合适的图表的名称

              4. 根据意图选择一个合适的表格类型\n"
        schema_overrides:
          - schema:
              type: array
      - handle: skills
        value:
          []
      - handle: stream
        value: true
      - handle: instruction
        from_flow:
          - input_handle: instruction
      - handle: x_axis_name
        value:
        from_flow:
          - input_handle: x_axis_name
      - handle: y_axis_name
        value:
        from_flow:
          - input_handle: y_axis_name
    task: llm::llm
    inputs_def:
      - handle: instruction
        json_schema:
          {}
      - handle: x_axis_name
        json_schema:
          type: string
        nullable: true
      - handle: y_axis_name
        json_schema:
          type: string
        nullable: true
    outputs_def:
      - handle: instruction
        json_schema:
          type: string
      - handle: title
        json_schema:
          type: string
      - handle: x_axis_name
        description: write your answer here
        json_schema:
          type: string
      - handle: y_axis_name
        json_schema:
          type: string
      - handle: language
        json_schema:
          type: string
      - handle: chart_type
        json_schema:
          type: string
          enum:
            - bar
            - line
            - scatter
            - pie
            - histogram
            - box
            - area
            - radar
            - heatmap
            - violin
            - bubble
  - node_id: +python#1
    title: "Python #1"
    icon: ":logos:python:"
    task:
      ui:
        default_width: 450
      inputs_def:
        - handle: table
          json_schema:
            type: string
            ui:widget: file
          nullable: false
          description: Input
      outputs_def:
        - handle: tables
          json_schema:
            type: array
            items:
              type: string
              ui:widget: file
          nullable: false
          description: Input
      executor:
        name: python
        options:
          entry: scriptlets/+scriptlet#1.py
    inputs_from:
      - handle: table
        from_flow:
          - input_handle: table
inputs_def:
  - handle: table
    description: Input
    json_schema:
      type: string
      ui:widget: file
    nullable: false
    executor_name: python
  - handle: instruction
    json_schema:
      type: string
      ui:widget: text
    nullable: false
    executor_name: python
  - group: Group
    collapsed: true
  - handle: x_axis_name
    json_schema:
      type: string
    value:
    nullable: true
    executor_name: python
  - handle: llm_model
    json_schema:
      ui:options:
        title: Model
      ui:widget: llm::model
    value:
      model: openai/gpt-4.1
      temperature: 0.63
      top_p: 0.5
      max_tokens: 1000000
    nullable: false
    executor_name: python
  - handle: y_axis_name
    json_schema:
      type: string
    value:
    nullable: true
    executor_name: python
  - handle: code_repair_attempts
    json_schema:
      type: integer
    value:
    nullable: true
    executor_name: python
outputs_def:
  - handle: output
    json_schema:
      type: string
    nullable: false
    executor_name: python
outputs_from:
  - handle: output
    from_node:
      - node_id: llm-chat#1
        output_handle: output
icon: ":twemoji:brain:"
title: "%ai-data-analysis%"
forward_previews:
  - result_chart#1
description: "%ai-powered-data-analysis-workflow-that-automatically-processes-t%"
